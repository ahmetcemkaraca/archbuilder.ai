# ArchBuilder.AI Staging Environment
# Test environment with production-like configuration

version: '3.8'

services:
  # Cloud Server (FastAPI) - Staging
  cloud-server:
    build:
      context: ./src/cloud-server
      dockerfile: Dockerfile
    container_name: archbuilder-cloud-server-staging
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=staging
      - DATABASE_URL=postgresql://archbuilder:password@postgres:5432/archbuilder_staging
      - REDIS_URL=redis://redis:6379/1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - VERTEX_AI_PROJECT_ID=${VERTEX_AI_PROJECT_ID}
      - RAGFLOW_API_URL=http://ragflow:8000
      - LOG_LEVEL=DEBUG
      - SENTRY_DSN=${SENTRY_DSN}
      - STRIPE_SECRET_KEY=${STRIPE_TEST_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_TEST_PUBLISHABLE_KEY}
    volumes:
      - ./src/cloud-server:/app
      - ./logs/staging:/app/logs
      - ./data/staging:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ragflow:
        condition: service_started
    networks:
      - archbuilder-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database - Staging
  postgres:
    image: postgres:15-alpine
    container_name: archbuilder-postgres-staging
    environment:
      - POSTGRES_DB=archbuilder_staging
      - POSTGRES_USER=archbuilder
      - POSTGRES_PASSWORD=password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5433:5432"
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./scripts/init-db-staging.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - archbuilder-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U archbuilder -d archbuilder_staging"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache - Staging
  redis:
    image: redis:7-alpine
    container_name: archbuilder-redis-staging
    ports:
      - "6380:6379"
    volumes:
      - redis_staging_data:/data
      - ./configs/redis-staging.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - archbuilder-staging-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RAGFlow Service - Staging
  ragflow:
    image: infiniflow/ragflow:latest
    container_name: archbuilder-ragflow-staging
    ports:
      - "8002:8000"
    environment:
      - RAGFLOW_API_KEY=${RAGFLOW_API_KEY}
      - RAGFLOW_ENV=staging
    volumes:
      - ragflow_staging_data:/app/data
    networks:
      - archbuilder-staging-network
    restart: unless-stopped

  # Nginx Reverse Proxy - Staging
  nginx:
    image: nginx:alpine
    container_name: archbuilder-nginx-staging
    ports:
      - "8080:80"
    volumes:
      - ./configs/nginx-staging.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx/staging:/var/log/nginx
    depends_on:
      - cloud-server
    networks:
      - archbuilder-staging-network
    restart: unless-stopped

  # Prometheus Monitoring - Staging
  prometheus:
    image: prom/prometheus:latest
    container_name: archbuilder-prometheus-staging
    ports:
      - "9091:9090"
    volumes:
      - ./configs/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
    networks:
      - archbuilder-staging-network
    restart: unless-stopped

  # Grafana Dashboard - Staging
  grafana:
    image: grafana/grafana:latest
    container_name: archbuilder-grafana-staging
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_STAGING_PASSWORD:-staging}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - archbuilder-staging-network
    restart: unless-stopped

  # Test Data Generator
  test-data-generator:
    build:
      context: ./scripts/test-data
      dockerfile: Dockerfile
    container_name: archbuilder-test-data-generator
    environment:
      - DATABASE_URL=postgresql://archbuilder:password@postgres:5432/archbuilder_staging
      - API_URL=http://cloud-server:8000
    depends_on:
      - cloud-server
      - postgres
    networks:
      - archbuilder-staging-network
    restart: "no"
    command: ["python", "generate_test_data.py"]

  # Load Testing Tool
  k6:
    image: grafana/k6:latest
    container_name: archbuilder-k6-staging
    volumes:
      - ./scripts/load-tests:/scripts
    networks:
      - archbuilder-staging-network
    command: ["run", "/scripts/staging-load-test.js"]

# Networks
networks:
  archbuilder-staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Volumes
volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  ragflow_staging_data:
    driver: local
  prometheus_staging_data:
    driver: local
  grafana_staging_data:
    driver: local
